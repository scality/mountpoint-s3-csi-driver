{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Scality Mountpoint S3 CSI Driver","text":"<p>The Scality Mountpoint S3 CSI Driver implements the Container Storage Interface for S3 object storage, allowing Kubernetes workloads to mount S3 buckets as persistent volumes.</p>"},{"location":"#overview","title":"Overview","text":"<p>This driver leverages Mountpoint for Amazon S3, a high-performance open-source file client for mounting an S3 bucket as a local file system, enabling the following capabilities:</p> <ul> <li>Mount S3 buckets as Kubernetes PersistentVolumes</li> <li>Support for dynamic and static provisioning</li> <li>Mount option configuration (read-only, prefix, etc.)</li> <li>S3 object API integration</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>For detailed installation instructions, see the deployment guide.</p> <pre><code># Quick installation using Helm\nhelm repo add scality https://scality.github.io/mountpoint-s3-csi-driver/charts\nhelm install mountpoint-s3-csi-driver scality/scality-mountpoint-s3-csi-driver\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Create a StorageClass, PersistentVolumeClaim, and Pod with the CSI driver:</p> <pre><code># Example StorageClass for dynamic provisioning\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: s3-storage\nprovisioner: s3.csi.scality.com\nparameters:\n  # Add your parameters here\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Configuration Options</li> <li>Examples</li> <li>Troubleshooting</li> </ul>"},{"location":"CONFIGURATION/","title":"Configuring the Mountpoint for Amazon S3 CSI Driver","text":"<p>See the Mountpoint documentation for Mountpoint specific configuration.</p>"},{"location":"CONFIGURATION/#static-provisioning","title":"Static Provisioning","text":"<p>The driver only supports Static Provisioning as of today, and you need an existing S3 Bucket to use.</p> <p>To use Static Provisioning, you should set <code>storageClassName</code> field of your PersistentVolume (PV) and PersistentVolumeClaim (PVC) to <code>\"\"</code> (empty string). Also, in order to make sure no other PVCs can claim your PV, you should define a one-to-one mapping using <code>claimRef</code>:</p> <pre><code>apiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: s3-pv\nspec:\n  ...\n  storageClassName: \"\" # Required for static provisioning\n  claimRef: # To ensure no other PVCs can claim this PV\n    namespace: default # Namespace is required even though it's in \"default\" namespace.\n    name: s3-pvc # Name of your PVC\n  csi:\n    driver: s3.csi.scality.com\n    ...\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: s3-pvc\nspec:\n  ...\n  storageClassName: \"\" # Required for static provisioning\n  volumeName: s3-pv # Name of your PV\n</code></pre> <p>See Reserving a PersistentVolume for more details.</p>"},{"location":"CONFIGURATION/#aws-credentials","title":"AWS Credentials","text":"<p>The Mountpoint CSI Driver can be configured to ingest credentials via two approaches: globally for the entire Kubernetes cluster, or using secrets (using volume level context) assigned to volumes.</p>"},{"location":"CONFIGURATION/#driver-level-credentials","title":"Driver-Level Credentials","text":""},{"location":"CONFIGURATION/#driver-level-credentials-with-k8s-secrets","title":"Driver-Level Credentials with K8s Secrets","text":"<p>Mountpoint CSI Driver supports sourcing static AWS credentials from K8s secrets.</p> graph LR;     CSI[CSI Driver]      P[\"`Application Pod     *K8s Secret Credentials*`\"]      K8sS[K8s Secret]      IAM_LT[\"Long Term IAM Credentials\"]      PV[Persistent Volume]     PVC[Persistent Volume Claim]      P --&gt; PVC      PVC --&gt; PV      PV --&gt; CSI      CSI --&gt; K8sS      K8sS --&gt; IAM_LT       style IAM_LT stroke:#0000ff,fill:#ccccff,color:#0000ff     style P stroke:#0000ff,fill:#ccccff,color:#0000ff <p>The CSI driver will read K8s secrets at <code>aws-secret.key_id</code> and <code>aws-secret.access_key</code> to pass keys to the driver. The secret name configurable if installing with helm: <code>awsAccessSecret.name</code>, and the installation namespace is configurable with the <code>--namespace</code> helm parameter.</p> <p>These keys are only read on startup, so must be in place before the driver starts. The following snippet can be used to create these secrets in the cluster:</p> <pre><code>kubectl create secret generic aws-secret \\\n    --namespace kube-system \\\n    --from-literal \"key_id=${AWS_ACCESS_KEY_ID}\" \\\n    --from-literal \"access_key=${AWS_SECRET_ACCESS_KEY}\"\n</code></pre> <p>To use K8s secrets for authentication, the secret must exist before installation, or the CSI Driver pods must be restarted to use the secret.</p> <p>[!WARNING] K8s secrets are not refreshed once read. To update long term credentials stored in K8s secrets, restart the CSI Driver pods.</p>"},{"location":"CONFIGURATION/#configure-driver-toleration-settings","title":"Configure driver toleration settings","text":"<p>Toleration of all taints is set to <code>false</code> by default. If you don't want to deploy the driver on all nodes, add policies to <code>Value.node.tolerations</code> to configure customized toleration for nodes.</p>"},{"location":"LOGGING/","title":"Logging","text":"<p>There are two types of logging you can use for troubleshooting. The first set of logs are from the CSI Driver, and the other are from Mountpoint.</p>"},{"location":"LOGGING/#csi-driver-logs","title":"CSI Driver logs","text":"<p>By default, CSI Driver logs are written to the driver pod\u2019s <code>stderr</code> and those are captured by Kubernetes and may be retrieved with a corresponding API call:</p> <pre><code>POD_NAME=s3-app\nNODE_NAME=$(kubectl get pod ${POD_NAME} -o=custom-columns=NODE:.spec.nodeName --no-headers | tail -1)\nDRIVER_POD=$(kubectl get pods -n kube-system --field-selector spec.nodeName=${NODE_NAME} -o=custom-columns=NAME:.metadata.name | grep s3-csi-node)\nkubectl logs ${DRIVER_POD} -n kube-system --container s3-plugin\n</code></pre>"},{"location":"LOGGING/#mountpoint-logs","title":"Mountpoint logs","text":"<p>Mountpoint logs are written in a node which your application pods are running. The location of the logs may vary by your operating systems, but they usually are written to host\u2019s systemd journal. To fetch these logs, first you need to find the pod UID and node name for the pod.</p> <pre><code>POD_NAME=s3-app\nkubectl get pods ${POD_NAME} -o=custom-columns=POD_UID:.metadata.uid,NODE:.spec.nodeName\n</code></pre> <p>Note down the pod UID and node name.</p> <p>Next, connect to the Kubernetes node with the name discovered in the previous step. If you are using EKS with EC2 instances as worker nodes, you can find more details about how to connect to your nodes in the AWS documentation.</p> <p>Once you have a session on the node itself, use the UID noted earlier to find the corresponding Mountpoint logs.</p> <pre><code>POD_UID=f1015626-32ed-46e6-9634-c739c3a31312\nPV_NAME=s3-pv\necho \"MOUNT_PID: $(ps -ef | grep \"$POD_UID.*$PV_NAME\" | grep -v \"grep\" | awk '{print $2}')\"\n</code></pre> <p>If Mountpoint is no longer running since it was unable to mount or possibly died later, there may no longer be an active process to search for. If a value for <code>MOUNT_PID</code> was emitted meaning that the Mountpoint process is still running, note that down.</p> <p>If Mountpoint is still running, use the following to grab logs just from that Mountpoint process updating the value for <code>MOUNT_PID</code>:</p> <pre><code>MOUNT_PID=&lt;MOUNT_PID&gt;\nUNIT=$(systemctl status $MOUNT_PID | grep --only-matching \"mount-s3-.*\\.service\" | tail -1)\njournalctl --unit $UNIT\n</code></pre> <p>If Mountpoint is no longer running, you can use the following to get logs from all Mountpoint processes that have been executed since boot. This may include logs from multiple Mountpoint processes.</p> <pre><code>journalctl --boot -t mount-s3\n</code></pre> <p>For more details about Mountpoint logging and the configuration options available, please refer to Mountpoint's logging documentation.</p>"},{"location":"install/","title":"Installation","text":""},{"location":"install/#prerequisites","title":"Prerequisites","text":"<ul> <li>Kubernetes Version &gt;=</li> </ul>"},{"location":"install/#installation_1","title":"Installation","text":""},{"location":"install/#configure-access-to-s3","title":"Configure access to S3","text":""},{"location":"install/#deploy-driver","title":"Deploy driver","text":"<p>You may deploy the Mountpoint for Amazon S3 CSI driver via Kustomize, Helm.</p>"},{"location":"install/#kustomize","title":"Kustomize","text":"<p>[!WARNING] Using the main branch to deploy the driver is not supported. The main branch may contain upcoming features incompatible with the currently released stable version of the driver.</p>"},{"location":"install/#helm","title":"Helm","text":"<p>Review the configuration values for the Helm chart.</p> <p>[!IMPORTANT] The S3 endpoint URL (<code>node.s3EndpointUrl</code>) is a required parameter when installing the CSI driver via Helm. The driver will not function without this parameter and the Helm installation will fail if it's not provided.</p> <p>Example installation with the required S3 endpoint URL:</p> <pre><code>helm install scality-mountpoint-s3-csi-driver ./charts/scality-mountpoint-s3-csi-driver \\\n  --namespace kube-system \\\n  --set node.s3EndpointUrl=https://s3.your-scality-cluster.com\n</code></pre>"},{"location":"install/#once-the-driver-has-been-deployed-verify-the-pods-are-running","title":"Once the driver has been deployed, verify the pods are running","text":"<pre><code>kubectl get pods -n kube-system -l app.kubernetes.io/name=scality-mountpoint-s3-csi-driver\n</code></pre>"},{"location":"install/#volume-configuration-example","title":"Volume Configuration Example","text":"<p>Follow the README for examples on using the driver.</p>"},{"location":"install/#uninstalling-the-driver","title":"Uninstalling the driver","text":""},{"location":"install/#helm_1","title":"Helm","text":"<pre><code>helm uninstall scality-mountpoint-s3-csi-driver --namespace kube-system\n</code></pre>"},{"location":"install/#kustomize_1","title":"Kustomize","text":"<pre><code>kubectl delete -k \"github.com/scality/mountpoint-s3-csi-driver/deploy/kubernetes/overlays/stable/?ref=&lt;YOUR-CSI-DRIVER-VERION-NUMBER&gt;\"\n</code></pre>"},{"location":"scality/","title":"Scality S3 CSI Driver - Quick Start Guide","text":"<p>This guide explains how to use the Scality S3 CSI Driver with Kubernetes, allowing your applications to use Scality S3 storage as persistent volumes.</p>"},{"location":"scality/#what-you-need","title":"What You Need","text":"<ul> <li>Kubernetes cluster (version 1.20+)</li> <li><code>kubectl</code> configured to access your cluster</li> <li>Helm 3</li> <li>Access credentials for your Scality S3 service</li> <li>S3 endpoint URL (REQUIRED)</li> </ul>"},{"location":"scality/#installation-in-30-seconds","title":"Installation in 30 Seconds","text":"<p>The fastest way to install is using our Makefile:</p> <pre><code>make csi-install \\\n  S3_ENDPOINT_URL=https://s3.your-scality.com \\\n  ACCESS_KEY_ID=your_access_key \\\n  SECRET_ACCESS_KEY=your_secret_key\n</code></pre>"},{"location":"scality/#core-commands","title":"Core Commands","text":"Command Description <code>make csi-install</code> Install the driver <code>make e2e</code> Run tests on installed driver <code>make e2e-all</code> Install driver and run tests <code>make csi-uninstall</code> Remove the driver (interactive) <code>make csi-uninstall-clean</code> Remove driver and namespace <code>make csi-uninstall-force</code> Force complete removal"},{"location":"scality/#installation-options","title":"Installation Options","text":""},{"location":"scality/#required-parameters","title":"Required Parameters","text":"<p>When installing, you must provide these values:</p> <ul> <li><code>S3_ENDPOINT_URL</code>: Your Scality S3 endpoint (REQUIRED, installation will fail without this)</li> <li><code>ACCESS_KEY_ID</code>: S3 access key</li> <li><code>SECRET_ACCESS_KEY</code>: S3 secret key</li> </ul> <p>Example: <pre><code>make csi-install \\\n  S3_ENDPOINT_URL=https://s3.example.com \\\n  ACCESS_KEY_ID=your_access_key \\\n  SECRET_ACCESS_KEY=your_secret_key\n</code></pre></p> <p>[!IMPORTANT] The S3_ENDPOINT_URL is now a strict requirement - the installation will fail if it's not provided.</p>"},{"location":"scality/#optional-parameters","title":"Optional Parameters","text":"<ul> <li><code>CSI_IMAGE_TAG</code>: Specify a particular driver version</li> <li><code>VALIDATE_S3</code>: Set to \"true\" to verify S3 credentials before installing</li> <li><code>ADDITIONAL_ARGS</code>: Any extra arguments to pass to the script</li> </ul> <p>Example with options: <pre><code>make csi-install \\\n  CSI_IMAGE_TAG=v1.14.0 \\\n  S3_ENDPOINT_URL=https://s3.example.com \\\n  ACCESS_KEY_ID=your_access_key \\\n  SECRET_ACCESS_KEY=your_secret_key \\\n  VALIDATE_S3=true\n</code></pre></p>"},{"location":"scality/#s3-validation","title":"S3 Validation","text":"<p>When you set <code>VALIDATE_S3=true</code>, the script will perform validation checks before installation:</p> <ol> <li>Basic Endpoint Connectivity: Verifies that the S3 endpoint URL is reachable.</li> <li>Checks if the endpoint exists and responds</li> <li> <p>Verifies it looks like an S3 service (by checking for appropriate responses)</p> </li> <li> <p>Credential Validation (if AWS CLI is installed):</p> </li> <li>Validates that your access key and secret key work correctly</li> <li>Shows available buckets if successful</li> </ol> <p>If AWS CLI is not installed, only the endpoint connectivity will be validated, but the credentials cannot be checked. The installation will proceed with a warning that credential issues might occur later.</p>"},{"location":"scality/#common-scality-configurations","title":"Common Scality Configurations","text":""},{"location":"scality/#local-development","title":"Local Development","text":"<pre><code>make csi-install \\\n  S3_ENDPOINT_URL=http://localhost:8000 \\\n  ACCESS_KEY_ID=localkey \\\n  SECRET_ACCESS_KEY=localsecret\n</code></pre>"},{"location":"scality/#scality-ring","title":"Scality Ring","text":"<pre><code>make csi-install \\\n  S3_ENDPOINT_URL=https://s3.ring.example.com \\\n  ACCESS_KEY_ID=ringkey \\\n  SECRET_ACCESS_KEY=ringsecret\n</code></pre>"},{"location":"scality/#scality-artesca","title":"Scality Artesca","text":"<pre><code>make csi-install \\\n  S3_ENDPOINT_URL=https://s3.artesca.example.com \\\n  ACCESS_KEY_ID=artescakey \\\n  SECRET_ACCESS_KEY=artescasecret\n</code></pre>"},{"location":"scality/#verifying-installation","title":"Verifying Installation","text":"<p>Check that the driver is running correctly:</p> <pre><code># View CSI driver pods\nkubectl get pods -n mount-s3\n\n# Verify CSI driver registration\nkubectl get csidrivers\n</code></pre>"},{"location":"scality/#running-tests","title":"Running Tests","text":""},{"location":"scality/#testing-an-installed-driver","title":"Testing an Installed Driver","text":"<p>If you've already installed the driver:</p> <pre><code>make e2e\n</code></pre>"},{"location":"scality/#installing-and-testing-in-one-step","title":"Installing and Testing in One Step","text":"<p>Install the driver and run all tests together:</p> <pre><code>make e2e-all \\\n  S3_ENDPOINT_URL=https://s3.example.com \\\n  ACCESS_KEY_ID=your_access_key \\\n  SECRET_ACCESS_KEY=your_secret_key\n</code></pre>"},{"location":"scality/#uninstalling","title":"Uninstalling","text":""},{"location":"scality/#standard-uninstall-interactive","title":"Standard Uninstall (Interactive)","text":"<p>Will ask before deleting the namespace:</p> <pre><code>make csi-uninstall\n</code></pre>"},{"location":"scality/#clean-uninstall-non-interactive","title":"Clean Uninstall (Non-interactive)","text":"<p>Automatically deletes the namespace:</p> <pre><code>make csi-uninstall-clean\n</code></pre>"},{"location":"scality/#force-uninstall","title":"Force Uninstall","text":"<p>For when normal uninstall methods aren't working:</p> <pre><code>make csi-uninstall-force\n</code></pre>"},{"location":"scality/#troubleshooting","title":"Troubleshooting","text":""},{"location":"scality/#cant-connect-to-s3-endpoint","title":"Can't Connect to S3 Endpoint","text":"<p>What to check: - Is the S3 endpoint URL correct? - Is there network connectivity to the endpoint? - Are you using the right protocol (http:// or https://)?</p>"},{"location":"scality/#authentication-problems","title":"Authentication Problems","text":"<p>What to check: - Double-check your access key and secret key - Verify the credentials work with other S3 tools - Check if your credentials have expired</p>"},{"location":"scality/#pods-wont-start","title":"Pods Won't Start","text":"<p>What to check: - View pod status: <code>kubectl get pods -n mount-s3</code> - Check pod details: <code>kubectl describe pods -n mount-s3</code> - Look at logs: <code>kubectl logs -n mount-s3 &lt;pod-name&gt; -c s3-driver</code></p>"},{"location":"scality/#namespace-stuck-when-uninstalling","title":"Namespace Stuck When Uninstalling","text":"<p>If the namespace is stuck in \"Terminating\" state:</p> <pre><code>make csi-uninstall-force\n</code></pre>"},{"location":"scality/#error-codes","title":"Error Codes","text":"<p>When reporting issues, include the error code from your output:</p> Code Meaning Common Cause 1 General error Various issues 10 Helm uninstall error Resource conflicts 11 Namespace deletion error Stuck resources 12 CSI driver deletion error Resource conflicts"},{"location":"scality/CHEATSHEET/","title":"Scality S3 CSI Driver Cheat Sheet","text":"<p>Context: This document is a reference for experienced users. It provides quick command examples and configuration snippets for installation, testing, and uninstallation.</p> <p>Note: The <code>kube-system</code> namespace is the recommended and default namespace for deploying the Scality S3 CSI Driver. Using other namespaces is supported only for testing and development purposes.</p>"},{"location":"scality/CHEATSHEET/#installation","title":"Installation","text":""},{"location":"scality/CHEATSHEET/#basic-installation","title":"Basic Installation","text":"<p><pre><code>make csi-install \\\n  S3_ENDPOINT_URL=http://localhost:8000 \\\n  ACCESS_KEY_ID=accessKey1 \\\n  SECRET_ACCESS_KEY=verySecretKey1 \\\n  VALIDATE_S3=true\n</code></pre> This installs the CSI driver in the default namespace (kube-system).</p>"},{"location":"scality/CHEATSHEET/#installation-with-custom-namespace","title":"Installation with Custom Namespace","text":"<pre><code>make csi-install \\\n  S3_ENDPOINT_URL=http://localhost:8000 \\\n  ACCESS_KEY_ID=accessKey1 \\\n  SECRET_ACCESS_KEY=verySecretKey1 \\\n  CSI_NAMESPACE=custom-namespace\n</code></pre>"},{"location":"scality/CHEATSHEET/#installation-with-all-options","title":"Installation with All Options","text":"<pre><code>make csi-install \\\n  CSI_IMAGE_TAG=v1.14.0 \\\n  CSI_IMAGE_REPOSITORY=my-registry/mountpoint-s3-csi-driver \\\n  CSI_NAMESPACE=custom-namespace \\\n  S3_ENDPOINT_URL=https://s3.example.com \\\n  ACCESS_KEY_ID=your_key \\\n  SECRET_ACCESS_KEY=your_secret \\\n  VALIDATE_S3=true\n</code></pre>"},{"location":"scality/CHEATSHEET/#testing","title":"Testing","text":""},{"location":"scality/CHEATSHEET/#basic-testing-of-already-installed-driver","title":"Basic Testing of Already Installed Driver","text":"<p><pre><code>make e2e\n</code></pre> Tests the CSI driver in the default namespace (kube-system).</p>"},{"location":"scality/CHEATSHEET/#testing-with-custom-namespace","title":"Testing with Custom Namespace","text":"<pre><code>make e2e CSI_NAMESPACE=custom-namespace\n</code></pre>"},{"location":"scality/CHEATSHEET/#run-only-basic-verification-tests-skip-go-tests","title":"Run Only Basic Verification Tests (Skip Go Tests)","text":"<p><pre><code>make e2e-verify CSI_NAMESPACE=custom-namespace\n</code></pre> This command only checks if: - The CSI driver pods are running correctly in the specified namespace (or in any namespace as a fallback) - The CSI driver is properly registered in the cluster It skips running the Go-based tests.</p>"},{"location":"scality/CHEATSHEET/#run-only-go-based-end-to-end-tests","title":"Run Only Go-Based End-to-End Tests","text":"<pre><code>make e2e-go CSI_NAMESPACE=custom-namespace\n</code></pre>"},{"location":"scality/CHEATSHEET/#advanced-testing-with-go-test-for-filtering-tests","title":"Advanced Testing with Go Test (for filtering tests)","text":"<pre><code># Go to the tests directory\ncd tests/e2e\n\n# Run tests with focus on specific test patterns (runs only matching tests)\ngo test -v -tags=e2e -ginkgo.focus=\"Basic Functionality\" -args -namespace=custom-namespace\n\n# Skip specific test patterns\ngo test -v -tags=e2e -ginkgo.skip=\"Volume Operations\" -args -namespace=custom-namespace\n\n# Combine multiple filters\ngo test -v -tags=e2e -ginkgo.focus=\"Basic\" -ginkgo.skip=\"Volume\" -args -namespace=custom-namespace\n</code></pre>"},{"location":"scality/CHEATSHEET/#install-and-test-in-one-step","title":"Install and Test in One Step","text":"<p><pre><code>make e2e-all \\\n  S3_ENDPOINT_URL=https://s3.example.com \\\n  ACCESS_KEY_ID=your_key \\\n  SECRET_ACCESS_KEY=your_secret\n</code></pre> Installs in the default namespace (kube-system).</p>"},{"location":"scality/CHEATSHEET/#install-with-custom-namespace-and-test","title":"Install with Custom Namespace and Test","text":"<pre><code>make e2e-all \\\n  S3_ENDPOINT_URL=https://s3.example.com \\\n  ACCESS_KEY_ID=your_key \\\n  SECRET_ACCESS_KEY=your_secret \\\n  CSI_NAMESPACE=custom-namespace\n</code></pre>"},{"location":"scality/CHEATSHEET/#uninstallation","title":"Uninstallation","text":""},{"location":"scality/CHEATSHEET/#uninstall-from-default-namespace","title":"Uninstall from Default Namespace","text":"<p><pre><code>make csi-uninstall\n</code></pre> Uninstalls from the default namespace (kube-system). This will NOT delete the kube-system namespace.</p>"},{"location":"scality/CHEATSHEET/#uninstall-from-a-custom-namespace","title":"Uninstall from a Custom Namespace","text":"<p><pre><code>make csi-uninstall CSI_NAMESPACE=custom-namespace\n</code></pre> By default, this will prompt before deleting the custom namespace.</p>"},{"location":"scality/CHEATSHEET/#auto-uninstall-with-custom-namespace-deletion","title":"Auto Uninstall with Custom Namespace Deletion","text":"<p><pre><code>make csi-uninstall-clean CSI_NAMESPACE=custom-namespace\n</code></pre> This automatically deletes the custom namespace without prompting. Note that if you don't specify a custom namespace, the kube-system namespace will NOT be deleted.</p>"},{"location":"scality/CHEATSHEET/#force-uninstall","title":"Force Uninstall","text":"<p><pre><code>make csi-uninstall-force CSI_NAMESPACE=custom-namespace\n</code></pre> Use this when standard uninstall methods aren't working. Note that if you don't specify a custom namespace, the kube-system namespace will NOT be deleted.</p>"},{"location":"scality/CHEATSHEET/#common-configurations","title":"Common Configurations","text":""},{"location":"scality/CHEATSHEET/#local-development","title":"Local Development","text":"<pre><code>make csi-install \\\n  S3_ENDPOINT_URL=http://localhost:8000 \\\n  ACCESS_KEY_ID=localkey \\\n  SECRET_ACCESS_KEY=localsecret\n</code></pre>"},{"location":"scality/CHEATSHEET/#scality-ring","title":"Scality Ring","text":"<pre><code>make csi-install \\\n  S3_ENDPOINT_URL=https://s3.ring.example.com \\\n  ACCESS_KEY_ID=ringaccesskey \\\n  SECRET_ACCESS_KEY=ringsecretaccesskey \\\n  CSI_NAMESPACE=scality-ring\n</code></pre>"},{"location":"scality/CHEATSHEET/#scality-artesca","title":"Scality Artesca","text":"<pre><code>make csi-install \\\n  S3_ENDPOINT_URL=https://s3.artesca.example.com \\\n  ACCESS_KEY_ID=artescaaccesskey \\\n  SECRET_ACCESS_KEY=artescasecretaccesskey \\\n  CSI_NAMESPACE=scality-artesca\n</code></pre>"}]}